import { AttaskListener } from "./attask-listener";
import { AttaskState } from "./attask-state";
import { Task, TaskerTask } from "./task";
import { AttaskStore } from "./attask-store";
import { AttaskMode } from "./attask-mode";
export default class Attask<P> implements Task<P> {
    private parent;
    private provider;
    private attaskState;
    private attaskMode;
    private chain;
    private child;
    private errorHandler;
    private silent;
    private linked;
    constructor(parent: Attask<P>, provider: P, attaskState: AttaskState, attaskMode: AttaskMode);
    sync(): Attask<P>;
    static sync<P>(): Attask<P>;
    async(): Attask<P>;
    static async<P>(): Attask<P>;
    store(source: AttaskStore | any): Attask<P>;
    static store<P>(source: AttaskStore | any): Attask<P>;
    absorb(source: AttaskStore | any): Attask<P>;
    provide(provider: P): Attask<P>;
    static provide<P>(provider: P): Attask<P>;
    must(...task: TaskerTask<P>[]): Attask<P>;
    static must<P>(...task: TaskerTask<P>[]): Attask<P>;
    wont(...task: TaskerTask<P>[]): Attask<P>;
    static wont<P>(...task: TaskerTask<P>[]): Attask<P>;
    might(...task: TaskerTask<P>[]): Attask<P>;
    static might<P>(...task: TaskerTask<P>[]): Attask<P>;
    catch(handler: AttaskListener<P, any> | any): Attask<P>;
    static catch<P>(handler: AttaskListener<P, any> | any): Attask<P>;
    silence(): Attask<P>;
    static silence<P>(): Attask<P>;
    unsilence(): Attask<P>;
    static unsilence<P>(): Attask<P>;
    link(): Attask<P>;
    static link<P>(): Attask<P>;
    unlink(): Attask<P>;
    static unlink<P>(): Attask<P>;
    then(linked?: boolean): Attask<P>;
    run(provider?: P, config?: AttaskState): any;
}
export { AttaskBatch } from "./attask-batch";
export { AttaskChain } from "./attask-chain";
export { AttaskConsumer } from "./attask-consumer";
export { AttaskListener } from "./attask-listener";
export { AttaskMode } from "./attask-mode";
export { AttaskOptional } from "./attask-optional";
export { AttaskPolicy } from "./attask-policy";
export { AttaskSimpleStore } from "./attask-simple-store";
export { AttaskState } from "./attask-state";
export { AttaskStore } from "./attask-store";
export { AttaskTask } from "./attask-task";
export { Task } from "./task";
